{"version":3,"sources":["components/Tile/Tile.tsx","components/Grid/Grid.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","components/Button/Button.tsx","containers/Game/data.ts","containers/Game/Game.tsx","serviceWorker.ts","index.tsx"],"names":["Tile","isActive","clickHandler","onClick","onKeyDown","role","aria-label","tabIndex","className","Grid","data","map","row","rowIndex","key","toString","col","columnIndex","renderRow","Header","title","children","Footer","Button","theme","type","defaultProps","INIT","LEVEL","START_TITLE","RUNNING_TITLE","VICTORY_TITLE","ABORT_TITLE","RESTART_TITLE","Game","useState","Data","gridData","setGridData","gameTitle","setGameTitle","gameInProgress","setGameInProgress","gameWon","setGameWon","clicks","setClicks","resetGame","useCallback","Math","floor","length","random","clickTile","coord","currentGrid","arr","slice","gridFlattened","flat","some","v","checkIfGameWon","c","clickHeader","clickFooter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2332e353.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype TileProps = {\r\n  isActive: boolean,\r\n  clickHandler: () => void,\r\n};\r\n\r\n/**\r\n * Render a grid tile\r\n *\r\n * @param isActive - Check if current tile is active\r\n * @param children - The click handler\r\n */\r\nfunction Tile({ isActive, clickHandler }: TileProps) {\r\n  return (\r\n    <div\r\n      onClick={() => clickHandler()}\r\n      onKeyDown={() => clickHandler()}\r\n      role=\"button\"\r\n      aria-label=\"Tile\"\r\n      tabIndex={0}\r\n      className={(isActive ? 'tile tile--isActive' : 'tile')}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Tile;\r\n","import React from 'react';\r\nimport Tile from '../Tile';\r\n\r\ntype GridProps = {\r\n  data: number[][],\r\n  clickHandler: (coord: number[]) => void,\r\n};\r\n\r\nfunction renderRow(row: number[], rowIndex: number, clickHandler: (coord: number[]) => void) {\r\n  return (\r\n    <div className=\"grid__row\" key={rowIndex.toString()}>\r\n      { row.map((col: number, columnIndex: number) => (\r\n        <Tile\r\n          key={columnIndex.toString()}\r\n          isActive={!!col}\r\n          clickHandler={() => clickHandler([rowIndex, columnIndex])}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Render the game grid\r\n *\r\n * @param data - The game data as 2D array\r\n * @param clickHandler - The click handler\r\n */\r\nfunction Grid({ data, clickHandler }: GridProps) {\r\n  return (\r\n    <div className=\"grid\">\r\n      <div className=\"grid__inner\">\r\n        { data.map((row: number[], rowIndex: number) => renderRow(row, rowIndex, clickHandler)) }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","import React from 'react';\r\n\r\ntype HeaderProps = {\r\n  title: string,\r\n  children: React.ReactNode,\r\n};\r\n\r\n/**\r\n * Render the game header\r\n *\r\n * @param title - The header title\r\n * @param children - The children\r\n */\r\nfunction Header({ title, children }: HeaderProps) {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header__title\">\r\n        {title}\r\n      </div>\r\n      <div className=\"header__children\">\r\n        { children }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\ntype FooterProps = {\r\n  children: React.ReactNode,\r\n};\r\n\r\n/**\r\n * Render the game footer\r\n *\r\n * @param children - The children\r\n */\r\nfunction Footer({ children }: FooterProps) {\r\n  return (\r\n    <div className=\"footer\">\r\n      { children }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\n\r\ntype ButtonProps = {\r\n  title: string,\r\n  clickHandler: () => void,\r\n  theme: string\r\n};\r\n\r\nconst defaultProps = {\r\n  theme: 'primary',\r\n};\r\n\r\n/**\r\n * Render a themed button\r\n *\r\n * @param title - The button title\r\n * @param clickHandler - The click handler\r\n * @param theme - The button theme css class\r\n */\r\nfunction Button({ title, clickHandler, theme }: ButtonProps) {\r\n  return (\r\n    <button\r\n      className={`button button--${theme}`}\r\n      type=\"button\"\r\n      onClick={() => clickHandler()}\r\n    >\r\n      {title}\r\n    </button>\r\n  );\r\n}\r\n\r\nButton.defaultProps = defaultProps;\r\n\r\nexport default Button;\r\n","/**\r\n * Grid schema\r\n *\r\n *   C C C C C\r\n * R 0 0 0 0 0\r\n * R 0 1 1 1 0\r\n * R 0 1 0 1 0\r\n * R 0 1 1 1 0\r\n * R 0 0 0 0 0\r\n */\r\n\r\n// Empty grid ([row[col]])\r\nconst INIT = [\r\n  [0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0],\r\n];\r\n\r\n// Game levels ([row[col]])\r\nconst LEVEL = [\r\n  [\r\n    [0, 0, 0, 0, 0],\r\n    [0, 1, 1, 1, 0],\r\n    [0, 1, 0, 1, 0],\r\n    [0, 1, 1, 1, 0],\r\n    [0, 0, 0, 0, 0],\r\n  ],\r\n  [\r\n    [1, 0, 0, 0, 1],\r\n    [0, 1, 0, 1, 0],\r\n    [0, 0, 1, 0, 0],\r\n    [0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 1],\r\n  ],\r\n  [\r\n    [0, 0, 1, 0, 0],\r\n    [0, 1, 0, 1, 0],\r\n    [1, 0, 1, 0, 1],\r\n    [0, 1, 0, 1, 0],\r\n    [0, 0, 1, 0, 0],\r\n  ],\r\n];\r\n\r\nconst START_TITLE = 'switches';\r\nconst RUNNING_TITLE = 'tap a switch';\r\nconst VICTORY_TITLE = 'victory';\r\nconst ABORT_TITLE = 'abort';\r\nconst RESTART_TITLE = 'restart';\r\n\r\nexport default {\r\n  INIT,\r\n  LEVEL,\r\n  START_TITLE,\r\n  RUNNING_TITLE,\r\n  VICTORY_TITLE,\r\n  ABORT_TITLE,\r\n  RESTART_TITLE,\r\n};\r\n","import React, { useState, useCallback } from 'react';\r\nimport Grid from '../../components/Grid';\r\nimport Header from '../../components/Header';\r\nimport Footer from '../../components/Footer';\r\nimport Button from '../../components/Button';\r\nimport Data from './data';\r\n\r\n/**\r\n * Render the game board\r\n */\r\nconst Game = () => {\r\n  const [gridData, setGridData] = useState(Data.INIT);\r\n  const [gameTitle, setGameTitle] = useState(Data.START_TITLE);\r\n  const [gameInProgress, setGameInProgress] = useState(false);\r\n  const [gameWon, setGameWon] = useState(false);\r\n  const [clicks, setClicks] = useState(0);\r\n\r\n  /**\r\n   * Get a random grid from data\r\n   */\r\n  function getRandomGrid() {\r\n    return Data.LEVEL[Math.floor(Data.LEVEL.length * Math.random())];\r\n  }\r\n\r\n  /**\r\n   * Reset the game\r\n   */\r\n  const resetGame = useCallback(() => {\r\n    setClicks(0);\r\n    setGameWon(false);\r\n    setGameInProgress(true);\r\n    setGridData(getRandomGrid());\r\n    setGameTitle(Data.RUNNING_TITLE);\r\n  }, []);\r\n\r\n  /**\r\n   * Check if every element in array was set truthy\r\n   */\r\n  function checkIfGameWon(currentGrid: number[][]) {\r\n    const gridFlattened = currentGrid.flat();\r\n    if (!(gridFlattened.some((v) => v !== gridFlattened[0]))) {\r\n      setGameWon(true);\r\n      setGameTitle(Data.VICTORY_TITLE);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle click on grid items\r\n   */\r\n  const clickTile = useCallback((coord: number[]) => {\r\n    if (!gameWon && gameInProgress) {\r\n      const row = coord[0];\r\n      const col = coord[1];\r\n      const currentGrid = gridData.map((arr) => arr.slice());\r\n\r\n      // Check if row - 1 is out of bounds\r\n      if (row - 1 >= 0) {\r\n        currentGrid[row - 1][col] = 1 - currentGrid[row - 1][col];\r\n      }\r\n\r\n      // Check if row + 1 is out of bounds\r\n      if (row + 1 <= currentGrid.length - 1) {\r\n        currentGrid[row + 1][col] = 1 - currentGrid[row + 1][col];\r\n      }\r\n\r\n      // Check if col - 1 is out of bounds\r\n      if (col - 1 >= 0) {\r\n        currentGrid[row][col - 1] = 1 - currentGrid[row][col - 1];\r\n      }\r\n\r\n      // Check if col + 1 is out of bounds\r\n      if (col + 1 <= currentGrid.length - 1) {\r\n        currentGrid[row][col + 1] = 1 - currentGrid[row][col + 1];\r\n      }\r\n\r\n      // Toggle clicked tile\r\n      currentGrid[row][col] = 1 - currentGrid[row][col];\r\n\r\n      // Set grid to new calculated grid\r\n      setGridData(currentGrid);\r\n\r\n      checkIfGameWon(currentGrid);\r\n\r\n      // Increase click count\r\n      setClicks((c) => c + 1);\r\n    }\r\n  }, [gridData, gameWon, gameInProgress]);\r\n\r\n  /**\r\n   * Handle click on header button\r\n   */\r\n  const clickHeader = useCallback(() => {\r\n    if (gameInProgress) {\r\n      resetGame();\r\n    }\r\n  }, [gameInProgress, resetGame]);\r\n\r\n  /**\r\n   * Handle click on footer button\r\n   */\r\n  const clickFooter = useCallback(() => {\r\n    resetGame();\r\n  }, [resetGame]);\r\n\r\n  return (\r\n    <div className={`game ${gameWon ? 'game--won' : ''}`}>\r\n      <Header title={gameTitle}>\r\n        {\r\n          gameInProgress && <Button title=\"Reset\" clickHandler={clickHeader} theme=\"blank\" />\r\n        }\r\n      </Header>\r\n      <Grid data={gridData} clickHandler={clickTile} />\r\n      <Footer>\r\n        {\r\n          !gameInProgress ? <Button title=\"New game\" clickHandler={clickFooter} /> : `${clicks} buttons pressed`\r\n        }\r\n      </Footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport Game from './containers/Game';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}